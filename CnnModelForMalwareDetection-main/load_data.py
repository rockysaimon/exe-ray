import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.utils.class_weight import compute_class_weight
import numpy as np

def load_data(data_dir, img_size, batch_size, validation_split=0.1):
    # Generadores de flujo de datos para entrenamiento, validación y prueba
    train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.1) 
    test_datagen = ImageDataGenerator(rescale=1./255, validation_split=validation_split)  # Solo reescalar para los datos de prueba

    train_generator = train_datagen.flow_from_directory(
        data_dir,
        target_size=img_size,
        batch_size=batch_size,
        class_mode='categorical',
        subset='training',  # Indicar que es el conjunto de entrenamiento
        shuffle=True,
        color_mode='grayscale'  # Modo de color en blanco y negro
    )

    validation_generator = train_datagen.flow_from_directory(
        data_dir,
        target_size=img_size,
        batch_size=batch_size,
        class_mode='categorical',
        subset='validation',  # Indicar que es el conjunto de validación
        shuffle=False,
        color_mode='grayscale'  # Modo de color en blanco y negro
    )
    test_generator = test_datagen.flow_from_directory(
        data_dir,
        target_size=img_size,
        batch_size=batch_size,
        class_mode='categorical',
        subset='validation',  # Indicar que es el conjunto de validación
        shuffle=False,
        color_mode='grayscale'  # Modo de color en blanco y negro
    )

    # Mapeo de los nombres de las clases (un tipo de labeling)
    class_indices = train_generator.classes
    clases = np.unique(class_indices)


    train_classes_unique = np.unique(train_generator.classes)
    missing_classes = set(train_classes_unique) - set(clases)
    if missing_classes:
        print("Clases faltantes:", missing_classes)
        clases = np.concatenate([clases, list(missing_classes)])

    # Calcular los pesos de clase
    class_weights = compute_class_weight(class_weight='balanced', classes=clases, y=train_generator.classes)
    class_weight_dict = dict(zip(clases, class_weights))
    print(class_weights)



    return train_generator, validation_generator, class_weight_dict, clases, test_generator
