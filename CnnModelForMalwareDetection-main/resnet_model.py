import tensorflow as tf
from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, BatchNormalization
from tensorflow.keras.models import Model
from tensorflow.keras.applications import ResNet50V2
from tensorflow.keras.optimizers import Adam
from tensorflow.keras import regularizers

def build_resnet_model(input_shape, num_classes, dropout_rate=0.4, l2_lambda=0.001):
    base_model = ResNet50V2(include_top=False, input_shape=(128,256,1), weights=None, classes=26)
    for layer in base_model.layers:
        layer.trainable = False

    x = base_model.output
    # Agregar más capas convolucionales y de agrupación
    x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
    x = BatchNormalization()(x)  # Capa de Normalización por lotes
    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)  # Usar padding 'same'
    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
    x = BatchNormalization()(x)  # Capa de Normalización por lotes
    x = Dropout(dropout_rate)(x)
    x = Dense(256, activation='relu', kernel_regularizer=regularizers.l2(l2_lambda))(x)
    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)  # Usar padding 'same'
    x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
    x = BatchNormalization()(x)  # Capa de Normalización por lotes
    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)  # Usar padding 'same'
    x = Conv2D(128, (3, 3), activation='relu', padding='same')(x)
    x = BatchNormalization()(x)  # Capa de Normalización por lotes
    x = MaxPooling2D(pool_size=(2, 2), padding='same')(x)  # Usar padding 'same'
    x = Conv2D(256, (1, 1), activation='relu')(x)  # Capa de convolución 1x1
    x = Dropout(dropout_rate)(x)
    x = Flatten()(x)
    x = Dense(256, activation='relu', kernel_regularizer=regularizers.l2(l2_lambda))(x)
    predictions = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=base_model.input, outputs=predictions)
    return model

def compile_model(model, lr=0.0001):
    model.compile(optimizer=Adam(learning_rate=lr), loss='categorical_crossentropy', metrics=['accuracy'])
